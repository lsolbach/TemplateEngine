<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook EBNF Module V1.2CR1//EN" "http://www.oasis-open.org/docbook/xml/ebnf/1.2CR1/dbebnf.dtd">
<book>
  <bookinfo>
    <title>Soulspace Template Engine Manual</title>

    <author>
      <surname>Solbach</surname>

      <firstname>Ludger</firstname>
    </author>

    <copyright>
      <year>2002</year>

      <year>2003</year>

      <year>2004</year>

      <year>2005</year>

      <year>2006</year>

      <year>2007</year>

      <year>2008</year>

      <year>2009</year>

      <holder>Ludger Solbach</holder>
    </copyright>
  </bookinfo>

  <preface>
    <title>Preface</title>

    <para>This is the documentation of the Soulspace Template Engine.</para>
  </preface>

  <chapter>
    <title>Introduction</title>

    <para>This is an introduction to the Soulspace Template Engine.</para>

    <para>The Template Engine helps you to generate dynamic html pages,
    program code, formatted text files, documentation and many other
    structured documents. A template lets you specify the structure of a
    document seperate from the concrete content of a document. The Soulspace
    Template Engine makes it easy to write such templates and process your
    data with these templates. You don't need great programming skills as the
    template language is really simple. The main idea is that simple work
    shold be possible in a simple way but complex work should be possible to
    (without being to difficult too).</para>

    <sect1>
      <title>What is a template engine?</title>

      <para>With the Template Engine you can for example generate html pages,
      code, formatted text files, documentation and many other structured
      documents. A template lets you specify the structure of a document
      seperate from the concrete content of a document.</para>
    </sect1>

    <sect1>
      <title>What is it used for?</title>

      <para>The Template Engine can be used for various tasks including the
      dynamic generation of HTML pages, the generation of business reports,
      code generation for model driven architecture (MDA). It is even possible
      to use the Template Engine as a rule engine.</para>
    </sect1>

    <sect1>
      <title>Features of the Soulspace Template Engine</title>

      <para><itemizedlist>
          <listitem>
            <para>String and numeric variables</para>
          </listitem>

          <listitem>
            <para>List variables</para>
          </listitem>

          <listitem>
            <para>Map variable</para>
          </listitem>

          <listitem>
            <para>Loops</para>
          </listitem>

          <listitem>
            <para>Branches</para>
          </listitem>

          <listitem>
            <para>Method definitions</para>
          </listitem>

          <listitem>
            <para>Java data binding</para>
          </listitem>

          <listitem>
            <para>Extensible through Java</para>
          </listitem>
        </itemizedlist></para>
    </sect1>

    <sect1>
      <title>A Simple Hello World Example</title>

      <para>The following Class is a simple "Hello World" example.</para>

      <para><programlistingco>
          <areaspec>
            <area coords="9" id="TemplateHelper" />
          </areaspec>

          <programlisting>
package org.soulspace.template.examples;

import org.soulspace.template.TemplateHelper;

public class HelloWorldTemplate {

  public static void main(String[] args) {
    try {
      System.out.println(TemplateHelper.generate("Hello World!", null));
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}

</programlisting>
        </programlistingco> <calloutlist>
          <callout arearefs="TemplateHelper">
             The TemplateHelper convenience class is called with a simple "Hello World!" template and no data. The result "Hello World!" is written to the console. 
          </callout>
        </calloutlist></para>

      <para>The example above doesn't show much of the power of the
      TemplateEngine. But if you use not just static text as a template, you
      can do a lot of useful things.</para>

      <para><programlistingco>
          <areaspec>
            <area coords="9" id="TemplateHelper" />
          </areaspec>

          <programlisting>
package org.soulspace.template.examples;

import org.soulspace.template.TemplateHelper;

public class HelloWorldTemplate {

  public static void main(String[] args) {
    try {
      System.out.println(TemplateHelper.generate("2 + 2 = &lt;?2 + 2?&gt;", null));
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}

</programlisting>
        </programlistingco> <calloutlist>
          <callout arearefs="TemplateHelper">
             Now the console output is "2 + 2 = 4". As you can see you can do calculations in the templates. 
          </callout>
        </calloutlist></para>
    </sect1>
  </chapter>

  <chapter>
    <title>Usage</title>

    <para>The following code snippet shows the usage of the template engine
    from java code.<programlisting>String template = "&lt;?'Hello World'?&gt;";
TemplateEngine te = new TemplateEngineImpl();
TokenList tokenList = te.tokenize(template);
AstNode ast = te.parse(tokenList);
String output = te.generate();
System.out.println(output);</programlisting></para>

    <para>The TokenList and/or the abstract syntax tree can be cached. You
    don't need to parse the template every time you want to generate some
    output.</para>
  </chapter>

  <chapter>
    <title>The Template Language</title>

    <para>A template can consist of 3 types of text blocks, text, code and comments.</para>

    <sect1>
      <title>Template text</title>

      <para>Template text is everything apart from template code and XML
      declarations. For example in an HTML template the normal HTML markup
      would be the template text. Unless you had marked something as template
      code (see below), the whole HTML page would be interpreted as template
      text and on generation would be returned unchanged. The template text is
      mostly the fixed part of a document, the part that doesn't change
      according to specific data.</para>
    </sect1>

    <sect1>
      <title>Template code</title>

      <para>Template code contains the statements and expressions of the
      template language. Template code is demarcated from template text by
      special character sequences, '&lt;?' for the beginning and '?&gt;' for
      the end of the template code. Template code consists of statements and
      expressions. Statements control the behaviour of the generation process
      and expressions are used to print data, calculate values or as
      conditions in statements.</para>
    </sect1>

    <sect1>
      <title>Template Comments</title>

      <para></para>
    </sect1>
  </chapter>

  <chapter>
    <sect1>
      <title>Expressions</title>

      <para>An expression is a part of the template code that gets evaluated
      and returns a value (with the exception of the assignment
      expression).<footnote>
          <para>The assignment expression is for assigning values to a
          variable and normally you wouldn't want the value printed in the
          generated output as a result of the assignment. If you want the
          value to be shown in the ouput, you can just put the variable name
          in the template after the assignment. See the description of the
          assignment operator.</para>
        </footnote> Expressions are used to calculate values, to print values
      and to control Loop statements.</para>

      <para>Values can be numeric or string constants and numeric or string
      variables.</para>
    </sect1>

    <sect2>
      <title>Constants</title>

      <para>The simplest form of an expression is a constant. A constant is
      just a fixed value that can be printed or used in calculations. The
      template language supports string constants and numeric
      constants.</para>

      <sect3>
        <title>Numeric Constants</title>

        <para>Numeric constants are numeric values which are defined fixed in
        the template code.</para>

        <para>TODO (numbers 1 1.5 -3.7)</para>
      </sect3>

      <sect3>
        <title>String Constants</title>

        <para>TODO ('Hello World')</para>
      </sect3>
    </sect2>

    <sect2>
      <title>Variables</title>

      <para>Variables are placeholders for values in the template code. There
      are four types of variables, string variables, numeric variables, list
      variables and map variables. Variables have a name as an identifier.
      Numeric and string variables store scalar values, list and map variables
      store aggregations of values.</para>

      <para>Variables can be created in the template or provided to the
      generator via data binding. Variables provided via data binding are
      global variables.Variables defined inside the template code are local
      variables because they have the scope of the block of code in which they
      are defined.</para>

      <table>
        <title>Variable types</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry align="left">Type</entry>

              <entry align="left">Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>Numeric</entry>

              <entry>variables for numbers (integers and floating
              point)</entry>
            </row>

            <row>
              <entry>String</entry>

              <entry>variables for text strings</entry>
            </row>

            <row>
              <entry>List</entry>

              <entry>variables that can contain multiple other values</entry>
            </row>

            <row>
              <entry>Map</entry>

              <entry>variables tha can contain values identified by a key
              name</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <sect3>
        <title>Numeric Variables</title>

        <para>Numeric variables can store numeric values.</para>

        <para>number foo</para>

        <para>foo = 13</para>
      </sect3>

      <sect3>
        <title>String Variables</title>

        <para>TODO</para>

        <para>string bar</para>

        <para>bar = 'Hello World'</para>
      </sect3>

      <sect3>
        <title>List Variables</title>

        <para>list aList</para>
      </sect3>

      <sect3>
        <title>Map Variables</title>

        <para>map aMap</para>
      </sect3>
    </sect2>

    <sect2>
      <title>Operators</title>

      <para>There is support for different kinds of operators in the Template
      Engine, for example arithmetic, logical and relational operators.</para>

      <sect3>
        <title>Arithmetic Operators</title>

        <para>Calculations on numbers and numeric variables can be done with
        arithmetic operators.</para>

        <table>
          <title>Arithmetic Operators</title>

          <tgroup cols="2">
            <tbody>
              <row>
                <entry>Operator</entry>

                <entry>Description</entry>
              </row>

              <row>
                <entry>+</entry>

                <entry>addition of numeric values (2 + 3)</entry>
              </row>

              <row>
                <entry>-</entry>

                <entry>substraction of numeric values (2 - 3)</entry>
              </row>

              <row>
                <entry>*</entry>

                <entry>multiplication of numeric values (2 * 3)</entry>
              </row>

              <row>
                <entry>/</entry>

                <entry>division of numeric values (2 / 3)</entry>
              </row>

              <row>
                <entry>//</entry>

                <entry>integer division (a division with remainder) of numeric
                values (2 / 3)</entry>
              </row>

              <row>
                <entry>%</entry>

                <entry>modulo (remainder of a division with remainder) (2 %
                3)</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect3>

      <sect3>
        <title>Relational Operators</title>

        <para>Comparisons, evaluate to true or false</para>

        <table>
          <title>Relational operators</title>

          <tgroup cols="2">
            <thead>
              <row>
                <entry align="left">Operator</entry>

                <entry align="left">Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>&gt;</entry>

                <entry>greater for numeric values (3 &gt; 2)</entry>
              </row>

              <row>
                <entry>&gt;=</entry>

                <entry>greater or equal for numeric values ()</entry>
              </row>

              <row>
                <entry>&lt;</entry>

                <entry>less for numeric values ()</entry>
              </row>

              <row>
                <entry>&lt;=</entry>

                <entry>less or equal for numeric values ()</entry>
              </row>

              <row>
                <entry>==</entry>

                <entry>equal for numeric values</entry>
              </row>

              <row>
                <entry>!=</entry>

                <entry>not equal for numeric values</entry>
              </row>

              <row>
                <entry>eq</entry>

                <entry>equal for string values</entry>
              </row>

              <row>
                <entry>ne</entry>

                <entry>not equal for string values</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect3>

      <sect3>
        <title>Logical Operators</title>

        <para>TODO (&amp;&amp;, ||, !) evaluate to true or false</para>

        <table>
          <title>Logical Operators</title>

          <tgroup cols="2">
            <tbody>
              <row>
                <entry>&amp;&amp;</entry>

                <entry>logical and</entry>
              </row>

              <row>
                <entry>||</entry>

                <entry>logical or</entry>
              </row>

              <row>
                <entry>!</entry>

                <entry>logical not</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect3>

      <sect3>
        <title>Assignment Operator</title>

        <para>TODO</para>
      </sect3>

      <sect3>
        <title>Dereference Operators</title>

        <para>TODO</para>
      </sect3>

      <sect3>
        <title>Operator Precedence</title>

        <para>TODO. The precedence or priority of the operators</para>

        <table>
          <title>Operator Precedence</title>

          <tgroup cols="2">
            <tbody>
              <row>
                <entry />

                <entry />
              </row>

              <row>
                <entry />

                <entry />
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect3>
    </sect2>

    <sect1>
      <title>Control Statements</title>

      <para>To control the generation of the template output depending on the
      input, you can use branch statements and loop statements.</para>

      <para>Blocks of statements ({}).</para>
    </sect1>

    <sect2>
      <title>If Branches</title>

      <para>TODO if else</para>

      <para>if (expression) { statement } [else { statement }]</para>

      <programlisting>&lt;?if(OrderItems) {?&gt;

&lt;?}?&gt;</programlisting>
    </sect2>

    <sect2>
      <title>While Loop</title>

      <para>TODO while</para>

      <para>while (expression) {statement}</para>

      <programlisting>&lt;?
numeric i
i = 0
while(i &lt; OrderItems) {?&gt;
  &lt;?i?&gt; &lt;?OrderItems:Product:Name?&gt; &lt;?OrderItems:Quantity?&gt;
  &lt;?i = i + 1
}?&gt;</programlisting>
    </sect2>

    <sect2>
      <title>Foreach Loop</title>

      <para>TODO foreach</para>

      <para>foreach LIST_VARIABLE {statement}</para>

      <para>
        <programlisting>&lt;?foreach OrderItems {?&gt;
  &lt;?OrderItems:Product:Name?&gt; &lt;?OrderItems:Quantity?&gt;
&lt;?}?&gt;</programlisting>
      </para>
    </sect2>
  </chapter>

  <chapter>
    <title>Data Binding</title>

    <para>Data binding enables you to provide the template engine with input
    data for the template generation. Defining some variables in the template,
    assigning values to them and doing calculations is a nice feature. But
    most of the time you have some external data on which a template should be
    applied. So you have to get the external data into the template engine.
    This is where the data binding comes into play.</para>

    <para>JavaBeans, XML files.</para>

    <sect1>
      <title>BeanDataSource</title>

      <indexterm>
        <primary>data source</primary>
      </indexterm>

      <para></para>
    </sect1>
  </chapter>

  <chapter>
    <title>Design</title>

    <para>The template engine has a clean and simple design. It mainly
    consists of four components that implement the functionality.</para>

    <sect1>
      <title>Tokenizer</title>

      <para>The Tokenizer is responsible for creating the input for the
      parser. The Tokenizer splits an input template into template text and
      template code. Template text is directly converted into TEXT tokens.
      Template code gets analysed further and split into Tokens representing
      the various code constructs. All matched Tokens are appended to a
      TokenList. This tokenizing process is also called lexical analyzing or
      scanning. The Tokenizer implementation is based heavily on regular
      expressions which leads to a compact implementation.</para>
    </sect1>

    <sect1>
      <title>Parser</title>

      <para>The Parser takes the TokenList as input and generates an abstract
      syntax tree (AST) of the template. It iterates over the Tokens in the
      TokenList and tries to create the nodes for the AST (AstNodes) according
      to the grammar of the template language. The Parser is written by
      hand.</para>
    </sect1>

    <sect1>
      <title>Generator</title>

      <para>The Generator uses the AST of the template and a symbol table to
      generate the output. It starts by calling the generate method on the
      root node of the AST which recursivly calls the generate methods of all
      its child nodes.</para>
    </sect1>

    <sect1>
      <title>Symbols and SymbolTables</title>

      <para>Input data and intermediate data (Variables) are represented by
      Symbols which are stored in a SymbolTable. A Symbol has a name by which
      it can be found in the SymbolTable. Sym</para>
    </sect1>
  </chapter>

  <chapter>
    <title>Grammar of the Template Language</title>

    <para>In this chapter the grammar of the template language is
    shown.</para>

    <productionset>
      <production id="template.START">
        <lhs>START</lhs>
        <rhs>
        	{( <nonterminal def="template.XML_DECL">XML_DECL</nonterminal> |
        	<nonterminal def="template.CODE">CODE</nonterminal> | <nonterminal def="template.TEXT">TEXT</nonterminal>
        	)}
        </rhs>
      </production>

      <production id="template.CODE">
        <lhs>CODE</lhs>
        <rhs>
          <nonterminal def="template.TERM">TERM</nonterminal>
		</rhs>
	  </production>
	  
      <production id="template.TERM">
        <lhs>TERM</lhs>
        <rhs>
        	<nonterminal def="template.TEXT">TEXT</nonterminal> | 
        	<nonterminal def="template.STMT">STMT</nonterminal> |
            <nonterminal def="template.EXPR">EXPR</nonterminal>
        </rhs>
      </production>

      <production id="template.XML_DECL">
        <lhs>XML_DECL</lhs>
        <rhs>
        	xml_declaration
        </rhs>
      </production>

      <production id="template.TEXT">
        <lhs>TEXT</lhs>
        <rhs>
        	text
        </rhs>
      </production>

      <production id="template.STMT">
        <lhs>STMT</lhs>
        <rhs>
        	<nonterminal def="template.IF_STMT">IF_STMT</nonterminal> |
        	<nonterminal def="template.WHILE_STMT">WHILE_STMT</nonterminal> |
        	<nonterminal def="template.FOREACH_STMT">FOREACH_STMT</nonterminal> | 
        	<nonterminal def="template.DECL_STMT">DECL_STMT</nonterminal> | 
        	<nonterminal def="template.BLOCK_STMT">BLOCK_STMT</nonterminal>
        </rhs>
      </production>

      <production id="template.IF_STMT">
        <lhs>IF_STMT</lhs>
		<rhs>
			'if', <nonterminal def="template.EXPR">EXPR</nonterminal>,
			 <nonterminal def="template.BLOCK_STMT">STMT</nonterminal>
			 'else', <nonterminal def="template.BLOCK_STMT">STMT</nonterminal>
		</rhs>
      </production>

      <production id="template.WHILE_STMT">
        <lhs>WHILE_STMT</lhs>
		<rhs>
			'while', <nonterminal def="template.EXPR">EXPR</nonterminal>, <nonterminal def="template.BLOCK_STMT">STMT</nonterminal>
		</rhs>
      </production>

      <production id="template.FOREACH_STMT">
        <lhs>FOREACH_STMT</lhs>
		<rhs>
			'foreach' <nonterminal def="template.id">identifier</nonterminal>,
			 '|', <nonterminal def="template.EXPR">EXPR</nonterminal>,
			 '&lt;-', <nonterminal def="template.EXPR">EXPR</nonterminal>
			 <nonterminal def="template.STMT">STMT</nonterminal>
		</rhs>
      </production>

      <production id="template.DECL_STMT">
        <lhs>DECL_STMT</lhs>
		<rhs>
		  <nonterminal def="template.METHOD_DECL">METHOD_DECL</nonterminal> |
		  <nonterminal def="template.SYMBOL_DECL">SYMBOL_DECL</nonterminal>
		</rhs>
      </production>

      <production id="template.METHOD_DECL">
        <lhs>METHOD_DECL</lhs>
		<rhs>
		  <nonterminal def="template.type">type</nonterminal>, <nonterminal def="template.id">id</nonterminal>, '(', <nonterminal def="template.PARAM_DECL">PARAM_DECL</nonterminal> ')' <nonterminal>BLOCK_STMT</nonterminal>
		</rhs>
      </production>

      <production id="template.PARAM_DECL">
        <lhs>PARAM_DECL</lhs>
		<rhs>
		  <nonterminal def="template.SYMBOL_DECL">SYMBOL_DECL</nonterminal>
		  <nonterminal def="template.SEPARATOR">separator</nonterminal> <nonterminal def="template.SYMBOL_DECL">SYMBOL_DECL</nonterminal>
		</rhs>
      </production>

      <production id="template.SYMBOL_DECL">
        <lhs>SYMBOL_DECL</lhs>
		<rhs>
		  <nonterminal def="template.type">type</nonterminal>, <nonterminal def="template.id">id</nonterminal>, (=, <nonterminal def="template.EXPR">EXPR</nonterminal>)?
		</rhs>
      </production>

      <production id="template.BLOCK_STMT">
        <lhs>BLOCK_STMT</lhs>
		<rhs>
			'{' (<nonterminal def="template.STMT">STMT</nonterminal>) '}'
		</rhs>
      </production>

      <production id="template.EXPR">
        <lhs>EXPR</lhs>
        <rhs>
        	<nonterminal def="template.ASSIGN_EXPR">ASSIGN_EXPR</nonterminal>
        </rhs>
      </production>

      <production id="template.ASSIGN_EXPR">
        <lhs>ASSIGN_EXPR</lhs>
        <rhs>
        	<nonterminal def="template.LOGICAL_OR_EXPR">LOGICAL_OR_EXPR</nonterminal>, '=', <nonterminal def="template.LOGICAL_OR_EXPR">LOGICAL_OR_EXPR</nonterminal>
        </rhs>
      </production>

      <production id="template.LOGICAL_OR_EXPR">
        <lhs>LOGICAL_OR_EXPR</lhs>
        <rhs>
        	<nonterminal def="template.LOGICAL_AND_EXPR">LOGICAL_AND_EXPR</nonterminal>, '||', <nonterminal def="template.LOGICAL_AND_EXPR">LOGICAL_AND_EXPR</nonterminal>
        </rhs>
      </production>

      <production id="template.LOGICAL_AND_EXPR">
        <lhs>LOGICAL_AND_EXPR</lhs>
        <rhs>
        	<nonterminal def="template.EQUAL_EXPR">EQUAL_EXPR</nonterminal>, '&amp;&amp;', <nonterminal def="template.EQUAL_EXPR">EQUAL_EXPR</nonterminal>
        </rhs>
      </production>

      <production id="template.EQUAL_EXPR">
        <lhs>EQUAL_EXPR</lhs>
        <rhs>
        	<nonterminal def="template.RELATIONAL_EXPR">RELATIONAL_EXPR</nonterminal>, '==', <nonterminal def="template.EQUAL_EXPR">EQUAL_EXPR</nonterminal>
        	<nonterminal def="template.RELATIONAL_EXPR">RELATIONAL_EXPR</nonterminal>, '!=', <nonterminal def="template.EQUAL_EXPR">EQUAL_EXPR</nonterminal>
        	<nonterminal def="template.RELATIONAL_EXPR">RELATIONAL_EXPR</nonterminal>, 'eq', <nonterminal def="template.EQUAL_EXPR">EQUAL_EXPR</nonterminal>
        	<nonterminal def="template.RELATIONAL_EXPR">RELATIONAL_EXPR</nonterminal>, 'ne', <nonterminal def="template.EQUAL_EXPR">EQUAL_EXPR</nonterminal>
        </rhs>
      </production>

      <production id="template.RELATIONAL_EXPR">
        <lhs>RELATIONAL_EXPR</lhs>
        <rhs>
        	<nonterminal def="template.ADD_EXPR">ADD_EXPR</nonterminal>, '&lt;', <nonterminal def="template.ADD_EXPR">ADD_EXPR</nonterminal> |
        	<nonterminal def="template.ADD_EXPR">ADD_EXPR</nonterminal>, '&lt;=', <nonterminal def="template.ADD_EXPR">ADD_EXPR</nonterminal> |
        	<nonterminal def="template.ADD_EXPR">ADD_EXPR</nonterminal>, '&gt;', <nonterminal def="template.ADD_EXPR">ADD_EXPR</nonterminal> |
        	<nonterminal def="template.ADD_EXPR">ADD_EXPR</nonterminal>, '&gt;=', <nonterminal def="template.ADD_EXPR">ADD_EXPR</nonterminal>
        </rhs>
      </production>

      <production id="template.ADD_EXPR">
        <lhs>ADD_EXPR</lhs>
        <rhs>
        	<nonterminal def="template.MULT_EXPR">MULT_EXPR</nonterminal>, '+', <nonterminal def="template.MULT_EXPR">MULT_EXPR</nonterminal> |
        	<nonterminal def="template.MULT_EXPR">MULT_EXPR</nonterminal>, '-', <nonterminal def="template.MULT_EXPR">MULT_EXPR</nonterminal>
        </rhs>
      </production>

      <production id="template.MULT_EXPR">
        <lhs>MULT_EXPR</lhs>
        <rhs>
        	<nonterminal def="template.UNARY_EXPR">UNARY_EXPR</nonterminal>, '*', <nonterminal def="template.MULT_EXPR">MULT_EXPR</nonterminal> |
        	<nonterminal def="template.UNARY_EXPR">UNARY_EXPR</nonterminal>, '/', <nonterminal def="template.MULT_EXPR">MULT_EXPR</nonterminal> |
        	<nonterminal def="template.UNARY_EXPR">UNARY_EXPR</nonterminal>, '//', <nonterminal def="template.MULT_EXPR">MULT_EXPR</nonterminal> |
        	<nonterminal def="template.UNARY_EXPR">UNARY_EXPR</nonterminal>, '%', <nonterminal def="template.MULT_EXPR">MULT_EXPR</nonterminal>
        </rhs>
      </production>

      <production id="template.UNARY_EXPR">
        <lhs>UNARY_EXPR</lhs>
        <rhs>
        	'-', <nonterminal def="template.PRIMARY_EXPR">PRIMARY_EXPR</nonterminal> |
        	'!', <nonterminal def="template.PRIMARY_EXPR">PRIMARY_EXPR</nonterminal>
        </rhs>
      </production>

      <production id="template.PRIMARY_EXPR">
        <lhs>PRIMARY_EXPR</lhs>
        <rhs>
        	'(', <nonterminal def="template.EXPR">EXPR</nonterminal>, ')' |
        	<nonterminal def="template.number_const">number_const</nonterminal> |
        	<nonterminal def="template.string_const">string_const</nonterminal> |
        	<nonterminal def="template.DEREF_EXPR">DEREF_EXPR</nonterminal>      	
        </rhs>
      </production>

      <production id="template.DEREF_EXPR">
        <lhs>DEREF_EXPR</lhs>
        <rhs>
        	<nonterminal def="template.ID_EXPR">ID_EXPR</nonterminal> ':' <nonterminal def="template.PRIMARY_EXPR">PRIMARY_EXPR</nonterminal>
        	'.' <nonterminal def="template.TYPE_METHOD_CALL">TYPE_METHOD_CALL</nonterminal> <nonterminal def="template.ARG_LIST">ARG_LIST</nonterminal>
        </rhs>
      </production>

      <production id="template.ID_EXPR">
        <lhs>ID_EXPR</lhs>
        <rhs>
        	<nonterminal def="template.id">id</nonterminal> |
        	'[', <nonterminal def="template.EXPR">EXPR</nonterminal>, ']' |
        	'(', <nonterminal def="template.ARG_LIST">ARG_LIST</nonterminal>, ')'
        </rhs>
      </production>

      <production id="template.ARG_LIST">
        <lhs>ARG_LIST</lhs>
        <rhs>
        	<nonterminal def="template.EXPR">EXPR</nonterminal>, <nonterminal def="template.separator">separator</nonterminal>
        </rhs>
      </production>

      <production id="template.ARG_LIST">
        <lhs>ARG_LIST</lhs>
        <rhs>
        	<nonterminal def="template.EXPR">EXPR</nonterminal>, <nonterminal def="template.separator">separator</nonterminal>
        </rhs>
      </production>

      <production id="template.TEXT">
        <lhs>TEXT</lhs>
        <rhs>
        	<nonterminal def="template.text">text</nonterminal>
        </rhs>
      </production>

      <production id="template.char">
        <lhs>char</lhs>
        <rhs>
        	[a-zA-Z]
        </rhs>
        <constraint linkend="test" />
      </production>      

      <production id="template.digit">
        <lhs>digit</lhs>
        <rhs>
        	[0-9]
        </rhs>
        <constraint linkend="test" />
      </production>

      <production id="template.char">
        <lhs>char</lhs>
        <rhs>
        	[a-zA-Z]
        </rhs>
        <constraint linkend="test" />
      </production>      

      <production id="template.separator">
        <lhs>separator</lhs>
        <rhs>
        	','
        </rhs>
      </production>
    </productionset>

    <constraintdef id="test">
      <title>Test constraint</title>
      <para>Constraint for a production</para>
    </constraintdef>
  </chapter>

  <chapter>
    <title>Examples</title>

    <para>TODO</para>
  </chapter>

  <chapter>
    <title>Todo's</title>

    <para><itemizedlist>
        <listitem>
          <para>Date variables</para>
        </listitem>
      </itemizedlist></para>
  </chapter>

  <chapter>
    <title>Dokbook-Test</title>

    <para><note>
        <title>Note</title>

        <para>Write notes in english.</para>
      </note> <tip>
        <title>Tip</title>

        <para>Go to sleep early.</para>
      </tip> <important>
        <title>Important</title>

        <para>This is an important message.</para>
      </important> <caution>
        <title>Caution</title>

        <para>Be cautious or something bad might happen.</para>
      </caution> <warning>
        <title>Warning</title>

        <para>This is a serious warning.</para>
      </warning></para>
  </chapter>

  <glossary>
    <glossentry>
      <glossterm>Template</glossterm>

      <glossdef>
         Input file for the Template Engine. A Template consists of normal text and code in the Template Language. 
      </glossdef>
    </glossentry>

    <glossentry>
      <glossterm>Variable</glossterm>

      <glossdef>A variable is a placeholder for data in a template.</glossdef>

      <glossseealso>Template</glossseealso>
    </glossentry>
  </glossary>

  <index></index>
</book>